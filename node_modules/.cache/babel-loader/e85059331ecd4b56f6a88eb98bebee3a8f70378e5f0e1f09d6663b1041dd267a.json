{"ast":null,"code":"var _jsxFileName = \"D:\\\\todo-list-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TodoForm from \"./components/TodoForm\"; // Import the TodoForm component.\nimport TodoList from \"./components/TodoList\"; // Import the TodoList component.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Define the App functional component.\n  const [todo, setTodo] = useState(\"\"); // Create a state variable \"todo\" \n  const [todos, setTodos] = useState([]); // Create a state variable \"todos\"\n  const [editId, setEditId] = useState(0); // Create a state variable \"editId\" \n\n  const handleSubmit = e => {\n    // Define a function \"handleSubmit\" to handle form submission.\n    e.preventDefault(); // Prevent the default form submission behavior.\n\n    if (editId) {\n      // Check if there is an \"editId\" (indicating an edit operation).\n      const editTodo = todos.find(i => i.id === editId); // Find the todo item to edit.\n      const updatedTodos = todos.map(t => t.id === editTodo.id ? t = {\n        id: t.id,\n        todo\n      } : {\n        id: t.id,\n        todo: t.todo\n      }); // Update the todos array with the edited todo item.\n      setTodos(updatedTodos); // Set the state \"todos\" to the updated list.\n      setEditId(0); // Reset the editId to indicate no ongoing edit.\n      setTodo(\"\"); // Reset the todo input field.\n      return; // Exit the function.\n    }\n\n    if (todo !== \"\") {\n      // Check if the \"todo\" input field is not empty.\n      setTodos([{\n        id: `${todo}-${Date.now()}`,\n        todo\n      }, ...todos]); // Add a new todo item to the todos array.\n      setTodo(\"\"); // Reset the todo input field.\n    }\n  };\n\n  // handle delete\n  const handleDelete = id => {\n    // Define a function \"handleDelete\" to delete a todo item.\n    const delTodo = todos.filter(to => to.id !== id); // Create a new array without the deleted todo item.\n    setTodos([...delTodo]); // Update the state \"todos\" with the filtered list.\n  };\n\n  const handleEdit = id => {\n    // Define a function \"handleEdit\" to edit a todo item.\n    const editTodo = todos.find(i => i.id === id); // Find the todo item to edit.\n    setTodo(editTodo.todo); // Set the \"todo\" state to the todo text of the item being edited.\n    setEditId(id); // Set the \"editId\" state to indicate an ongoing edit.\n  };\n\n  return (\n    /*#__PURE__*/\n    // Start rendering the App component.\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Todo List App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n          handleSubmit: handleSubmit,\n          todo: todo,\n          editId: editId,\n          setTodo: setTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(TodoList, {\n          todos: todos,\n          handleEdit: handleEdit,\n          handleDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)\n  ); // End of the render method.\n};\n_s(App, \"rVIc2XNts+WY+Na8KcOaSI8hLuk=\");\n_c = App;\nexport default App; // Export the App component as the default export of the module.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TodoForm","TodoList","App","todo","setTodo","todos","setTodos","editId","setEditId","handleSubmit","e","preventDefault","editTodo","find","i","id","updatedTodos","map","t","Date","now","handleDelete","delTodo","filter","to","handleEdit"],"sources":["D:/todo-list-react/src/App.js"],"sourcesContent":["import React, { useState } from \"react\"; \n\nimport TodoForm from \"./components/TodoForm\"; // Import the TodoForm component.\nimport TodoList from \"./components/TodoList\"; // Import the TodoList component.\n\nconst App = () => { // Define the App functional component.\n  const [todo, setTodo] = useState(\"\"); // Create a state variable \"todo\" \n  const [todos, setTodos] = useState([]); // Create a state variable \"todos\"\n  const [editId, setEditId] = useState(0); // Create a state variable \"editId\" \n\n  const handleSubmit = (e) => { // Define a function \"handleSubmit\" to handle form submission.\n    e.preventDefault(); // Prevent the default form submission behavior.\n\n    if (editId) { // Check if there is an \"editId\" (indicating an edit operation).\n      const editTodo = todos.find((i) => i.id === editId); // Find the todo item to edit.\n      const updatedTodos = todos.map((t) =>\n        t.id === editTodo.id\n          ? (t = { id: t.id, todo })\n          : { id: t.id, todo: t.todo }\n      ); // Update the todos array with the edited todo item.\n      setTodos(updatedTodos); // Set the state \"todos\" to the updated list.\n      setEditId(0); // Reset the editId to indicate no ongoing edit.\n      setTodo(\"\"); // Reset the todo input field.\n      return; // Exit the function.\n    }\n\n    if (todo !== \"\") { // Check if the \"todo\" input field is not empty.\n      setTodos([{ id: `${todo}-${Date.now()}`, todo }, ...todos]); // Add a new todo item to the todos array.\n      setTodo(\"\"); // Reset the todo input field.\n    }\n  };\n\n\n  // handle delete\n  const handleDelete = (id) => { // Define a function \"handleDelete\" to delete a todo item.\n    const delTodo = todos.filter((to) => to.id !== id); // Create a new array without the deleted todo item.\n    setTodos([...delTodo]); // Update the state \"todos\" with the filtered list.\n  };\n\n  const handleEdit = (id) => { // Define a function \"handleEdit\" to edit a todo item.\n    const editTodo = todos.find((i) => i.id === id); // Find the todo item to edit.\n    setTodo(editTodo.todo); // Set the \"todo\" state to the todo text of the item being edited.\n    setEditId(id); // Set the \"editId\" state to indicate an ongoing edit.\n  };\n\n  return ( // Start rendering the App component.\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Todo List App</h1>\n        <TodoForm\n          handleSubmit={handleSubmit}\n          todo={todo}\n          editId={editId}\n          setTodo={setTodo}\n        /> {/* Render the TodoForm component with props. */}\n        <TodoList\n          todos={todos}\n          handleEdit={handleEdit}\n          handleDelete={handleDelete}\n        /> {/* Render the TodoList component with props. */}\n      </div>\n    </div>\n  ); // End of the render method.\n};\n\nexport default App; // Export the App component as the default export of the module."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}